// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  uniqueName     String?
  email          String   @unique
  profilePicture String?
  authId         String   @unique // auth providerId eg: clerk, betterauth...
  role           Role     @default(USER)
  headline       String?
  location       String?
  skills         String[]
  bio            String?
  profileImage   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Job       Job[]
  Resume    Resume[]
  Match     Match[]
}

enum Role {
  USER
  COMPANY
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  description String
  skills      String[]
  location    String?
  jobType     JobType  @default(FULL_TIME)
  salaryRange String?
  isArchived  Boolean  @default(false)
  createdById String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User     @relation(fields: [createdById], references: [id])
  Match     Match[]
  Resume    Resume[]
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
  TEMPORARY
}

model Resume {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fileUrl         String
  parsedText      String
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?  @db.ObjectId
  jobId           String?  @db.ObjectId
  matchPercentage Float?
  matchedSkills   String[]
  missingSkills   String[]
  summary         String?
  createdAt       DateTime @default(now())
  Match           Match[]
  Job             Job?     @relation(fields: [jobId], references: [id])
}

model Match {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId           String?  @db.ObjectId
  resumeId        String?  @db.ObjectId
  userId          String?  @db.ObjectId
  matchPercentage Float
  matchedSkills   String[]
  missingSkills   String[]
  summary         String
  createdAt       DateTime @default(now())

  job    Job?    @relation(fields: [jobId], references: [id])
  resume Resume? @relation(fields: [resumeId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
}
